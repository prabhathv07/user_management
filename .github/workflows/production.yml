name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/profile-management
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10.12] # Define Python versions here
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: myappdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests with Pytest
        env:
          DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/myappdb  # Configure the DATABASE_URL environment variable for tests
        run: pytest

  build-and-push-docker:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Set push flag based on branch
      - name: Set Docker push flag
        id: push_flag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "PUSH=true" >> $GITHUB_OUTPUT
          else
            echo "PUSH=false" >> $GITHUB_OUTPUT
          fi
      
      # Only login if we're going to push
      - name: Log in to DockerHub
        if: steps.push_flag.outputs.PUSH == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      # Build the Docker image - use different settings based on branch
      - name: Build Docker image (feature branch)
        if: steps.push_flag.outputs.PUSH != 'true'
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true  # Load image to Docker daemon instead of pushing
          tags: prabhath090/wis_club_api:local-test
          platforms: linux/amd64  # Only build for local platform on feature branches
          outputs: type=docker
          context: .
      
      # Only on main branch - build and push to Docker Hub
      - name: Build and push Docker image (main branch)
        if: steps.push_flag.outputs.PUSH == 'true'
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: prabhath090/wis_club_api:${{ github.sha }} # Uses the Git SHA for tagging
          platforms: linux/amd64,linux/arm64 # Multi-platform support
          cache-from: type=registry,ref=prabhath090/wis_club_api:cache
          cache-to: type=inline,mode=max
          context: .
          
      # Scan the local image when on feature branches
      - name: Scan local Docker image (feature branch)
        if: steps.push_flag.outputs.PUSH != 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'prabhath090/wis_club_api:local-test'
          format: 'table'
          exit-code: '0' # Continue even with vulnerabilities
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      # Scan the pushed image when on main branch
      - name: Scan Docker image (main branch)
        if: steps.push_flag.outputs.PUSH == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'prabhath090/wis_club_api:${{ github.sha }}'
          format: 'table'
          exit-code: '0' # Continue even with vulnerabilities
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      # Mark job as successful on feature branches
      - name: Feature branch build success
        if: steps.push_flag.outputs.PUSH != 'true'
        run: echo "Docker image build completed successfully on feature branch"
